import numpy as np
from scipy.optimize import root

def function(x, c):
    return x**3 - x + c

def cubic_cont_step(f, x0, p0, p1):
    # Define a range of p values
    p_range = np.linspace(p0, p1, 100)
    # Create arrays to store the solutions and corresponding p values
    solutions = np.array([x0])
    p_values = np.array([p0])
    # Iterate over the range of p values
    for p in p_range[:-1]:
        # Use the previous solution as the initial guess
        x_guess = solutions[-1]
        # Find the root of the equation with the current p value
        sol = root(f, x0=x_guess, args=(p,))
        # Check if the root-finding was successful
        if sol.success:
            # Append the solution and corresponding p value to the arrays
            solutions = np.append(solutions, sol.x)
            p_values = np.append(p_values, p)
    # Choose two solutions and corresponding p values to start the next step
    v0 = np.array([p_values[1], solutions[1]])
    v1 = np.array([p_values[2], solutions[2]])
    return v0, v1

def conditions(v, c, approx, secant):
    # Calculate the two conditions for the pseudo arc length continuation
    condition1 = function(v[1], c) - v[0]
    condition2 = np.dot(v - approx, secant)
    return np.array([condition1, condition2])

def pseudo_arc_length(f, x0, p0, p1, target_p):
    # Set the target value of the parameter
    p_target = target_p
    # Define an initial guess for the solution using the given x0 and p0
    x_guess = np.array([p0, x0])
    # Set the length of the pseudo arc to 1
    length = 1.0
    # Set the step size for the pseudo arc length continuation
    delta_s = 0.1
    # Iterate until the target p value is reached
    while x_guess[0] < p_target:
        # Calculate the tangent vector to the pseudo arc
        tangent = np.array([1, -function(x_guess[1], x_guess[0])])
        tangent /= np.linalg.norm(tangent)
        # Calculate the secant vector to the pseudo arc
        secant = tangent * length
        # Calculate the approximate solution along the pseudo arc
        approx = x_guess + secant
        # Find the solution to the pseudo arc length continuation problem
        sol = root(conditions, x0=x_guess[1], args=(x_guess[0], approx, secant))
        # Check if the root-finding was successful
        if not sol.success:
            raise Exception("Failed to find a solution.")
        # Update the solution and p value using the pseudo arc length continuation
        x_guess = approx + sol.x[1] * tangent
        x_guess[0] += delta_s
    return x_guess[1], x_guess[0]
pseudo_arc_length(function,0,-2,2,4)