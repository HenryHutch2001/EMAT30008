# %%
import numpy as np
import matplotlib.pyplot as plt
import scipy
# %%
a = 0 
b = 1
x = np.linspace(a,b,1000)
def fun(x,b,a,y1,y2):
    u = ((y2-y1)/(b-a))*(x-a) +y1
    print(u)
    return u
sol = fun(x,a,b,0,1)

plt.plot(x,sol)
plt.show()
# %%
""" def f(x,u):
    dx2/dt2 = 0
    return dx2/dt2 """
def f(x,u):
    return 0 
def solve_bvp(f, a, b, y1, y2, N):
    dx = (b - a) / N #Defining delta x 
    x = np.linspace(a, b, N+1) #Defining gridspace
    u = np.zeros(N-1) #Defining solution space
    u[0] = y1
    u[N] = y2
    solutions = np.zeros(N-1)
    for i in range(1,N-1):
        u[i] = dx**2 * f(x[i], u[i-1]) + 2*u[i-1] - u[i-2]
    for i in range(1,len(u[i])):
        solutions

"""     for i in range(1, N):
        u[i] = dx**2 * f(x[i], u[i-1]) + 2*u[i-1] - u[i-2]
    return x, u """
x,u = solve_bvp(f,0,1,0,1,100)
plt.plot(u,x)
# %%
